{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/ttaudiohelper', 'core/notification','mod_readaloud/ttbrowserrec'],\n    function ($, log, audioHelper, notification, browserRec) {\n        \"use strict\"; // jshint ;_;\n        /*\n        *  The TT recorder\n         */\n\n        log.debug('TT Recorder: initialising');\n\n        return {\n            waveHeight: 75,\n            audio: {\n                stream: null,\n                blob: null,\n                dataURI: null,\n                start: null,\n                end: null,\n                isRecording: false,\n                isRecognizing: false,\n                transcript: null\n            },\n            submitting: false,\n            owner: '',\n            controls: {},\n            uniqueid: null,\n            audio_updated: null,\n            maxTime: 15000,\n            passagehash: null,\n            region: null,\n            asrurl: null,\n            lang: null,\n            browserrec: null,\n            usebrowserrec: false,\n            currentTime: 0,\n            stt_guided: false,\n            currentPrompt: false,\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n            init: function(opts){\n\n                var that = this;\n\n                this.uniqueid=opts['uniqueid'];\n                this.callback=opts['callback'];\n                this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n                this.shadow = opts['shadow'];\n                this.prepare_html();\n                this.controls.recordercontainer.show();\n                this.register_events();\n\n                //set up events\n                var on_gotstream=  function(stream) {\n\n                    //clear any existing interval\n                    if(that.interval!==undefined){\n                        clearInterval(that.interval);\n                    }\n\n                    var newaudio={stream: stream, isRecording: true};\n                    that.update_audio(newaudio);\n                    that.currentTime = 0;\n\n                    that.interval = setInterval(function() {\n                        if (that.currentTime < that.maxTime) {\n                            that.currentTime += 10;\n                        } else {\n                            that.update_audio('isRecognizing',true);\n                            // vm.isRecognizing = true;\n                            that.audiohelper.stop();\n                        }\n                    }, 10);\n\n                };\n\n                var on_error = function(error) {\n                    switch (error.name) {\n                        case 'PermissionDeniedError':\n                        case 'NotAllowedError':\n                            notification.alert(\"Error\",'Please allow access to your microphone!', \"OK\");\n                            break;\n                        case 'DevicesNotFoundError':\n                        case 'NotFoundError':\n                            notification.alert(\"Error\",'No microphone detected!', \"OK\");\n                            break;\n                        default:\n                            //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                            //notification.alert(\"Error\", error.name, \"OK\");\n                            log.debug(\"Error\", error.name);\n                    }\n                };\n\n                var on_stopped = function(blob) {\n                    clearInterval(that.interval);\n\n                    //if the blob is undefined then the user is super clicking or something\n                    if(blob===undefined){\n                        return;\n                    }\n\n                    //if ds recc\n                    var newaudio = {\n                        blob: blob,\n                        dataURI: URL.createObjectURL(blob),\n                        end: new Date(),\n                        isRecording: false,\n                        length: Math.round((that.audio.end - that.audio.start) / 1000),\n                    };\n                    that.update_audio(newaudio);\n\n                    that.deepSpeech2(that.audio.blob, function(response){\n                        log.debug(response);\n                        that.update_audio('isRecognizing',false);\n                        if(response.data.result===\"success\" && response.data.transcript){\n                            that.gotRecognition(response.data.transcript.trim());\n                        } else {\n                            notification.alert(\"Information\",\"We could not recognize your speech.\", \"OK\");\n                        }\n                    });\n\n                };\n\n\n\n\n                //If browser rec (Chrome Speech Rec) (and ds is optiona)\n                if(browserRec.will_work_ok() && ! this.stt_guided){\n                    //Init browserrec\n                    log.debug(\"using browser rec\");\n                    this.browserrec = browserRec.clone();\n                    this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                    this.usebrowserrec=true;\n\n                    //set up events\n                    that.browserrec.onerror = on_error;\n                    that.browserrec.onend = function(){\n                        //do something here\n                    };\n                    that.browserrec.onstart = function(){\n                        //do something here\n                    };\n                    that.browserrec.onfinalspeechcapture=function(speechtext){\n                        that.gotRecognition(speechtext);\n                        that.update_audio('isRecording',false);\n                        that.update_audio('isRecognizing',false);\n                    };\n\n                    //If DS rec\n                }else {\n                    //set up wav for ds rec\n                    log.debug(\"using ds rec\");\n                    this.audiohelper =  audioHelper.clone();\n                    this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                    that.audiohelper.onError = on_error;\n                    that.audiohelper.onStop = on_stopped;\n                    that.audiohelper.onStream = on_gotstream;\n\n                }//end of setting up recorders\n\n            },\n\n            prepare_html: function(){\n                this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n                this.controls.recorderbutton = $('#ttrec_' + this.uniqueid + '_recorderdiv');\n                this.passagehash =this.controls.recorderbutton.data('passagehash');\n                this.region=this.controls.recorderbutton.data('region');\n                this.asrurl=this.controls.recorderbutton.data('asrurl');\n                this.lang =this.controls.recorderbutton.data('lang');\n                this.maxTime=this.controls.recorderbutton.data('maxtime');\n                this.waveHeight=this.controls.recorderbutton.data('waveheight');\n            },\n\n            silence_detected: function(){\n                if(this.audio.isRecording){\n                    this.toggleRecording();\n                }\n            },\n\n            update_audio: function(newprops,val){\n                if (typeof newprops === 'string') {\n                    log.debug('update_audio:' + newprops + ':' + val);\n                    if (this.audio[newprops] !== val) {\n                        this.audio[newprops] = val;\n                        this.audio_updated();\n                    }\n                }else{\n                    for (var theprop in newprops) {\n                        this.audio[theprop] = newprops[theprop];\n                        log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                    }\n                    this.audio_updated();\n                }\n            },\n\n            register_events: function(){\n                var that = this;\n\n                this.controls.recordercontainer.click(function(){\n                    that.toggleRecording();\n                });\n\n                this.controls.recordercontainer.keypress(function(){\n                    that.toggleRecording();\n                });\n\n                this.audio_updated=function() {\n                    //pointer\n                    if (that.audio.isRecognizing) {\n                        that.show_recorder_pointer('none');\n                    } else {\n                        that.show_recorder_pointer('auto');\n                    }\n\n                    if(that.audio.isRecognizing || that.audio.isRecording ) {\n                        this.controls.recorderbutton.css('background', '#e52');\n                    }else{\n                        this.controls.recorderbutton.css('background', 'green');\n                    }\n\n                    //div content WHEN?\n                    that.controls.recorderbutton.html(that.recordBtnContent());\n                };\n\n            },\n\n            show_recorder_pointer: function(show){\n                if(show) {\n                    this.controls.recorderbutton.css('pointer-events', 'none');\n                }else{\n                    this.controls.recorderbutton.css('pointer-events', 'auto');\n                }\n\n            },\n\n\n            gotRecognition:function(transcript){\n                log.debug('transcript:' + transcript);\n                var message={};\n                message.type='speech';\n                message.capturedspeech = transcript;\n                //POINT\n                this.callback(message);\n            },\n\n            cleanWord: function(word) {\n                return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n            },\n\n            recordBtnContent: function() {\n\n                if(!this.audio.isRecognizing){\n\n                    if (this.audio.isRecording) {\n                        return '<i class=\"fa fa-stop\">';\n                    } else {\n                        return '<i class=\"fa fa-microphone\">';\n                    }\n\n                } else {\n                    return '<i class=\"fa fa-spinner fa-spin\">';\n                }\n            },\n            toggleRecording: function() {\n                var that =this;\n\n                //If we are recognizing, then we want to discourage super click'ers\n                if (this.audio.isRecognizing) {\n                      return;\n                }\n\n                //If we are current recording\n                if (this.audio.isRecording) {\n                    //If using Browser Rec (chrome speech)\n                    if(this.usebrowserrec){\n                        clearInterval(that.interval);\n                        that.update_audio('isRecording',false);\n                        that.update_audio('isRecognizing',true);\n                        this.browserrec.stop();\n\n                        //If using DS rec\n                    }else{\n                        this.update_audio('isRecognizing',true);\n                        this.audiohelper.stop();\n                    }\n\n                    //lets notify the caller we stopped recording\n                    log.debug('recording stopped:');\n                    var message={};\n                    message.type='recordingstopped';\n                    that.callback(message);\n\n                    //If we are NOT currently recording\n                } else {\n\n                    //If using Browser Rec (chrome speech)\n                    if(this.usebrowserrec){\n                        this.update_audio('isRecording',true);\n                        this.browserrec.start();\n                        that.currentTime = 0;\n                        this.interval = setInterval(function() {\n                            if (that.currentTime < that.maxTime) {\n                                that.currentTime += 10;\n                            } else {\n                                that.update_audio('isRecording',false);\n                                that.update_audio('isRecognizing',true);\n                                clearInterval(that.interval);\n                                that.browserrec.stop();\n                            }\n                        }, 10);\n\n                        //If using DS Rec\n                    }else {\n                        var newaudio = {\n                            stream: null,\n                            blob: null,\n                            dataURI: null,\n                            start: new Date(),\n                            end: null,\n                            isRecording: false,\n                            isRecognizing:false,\n                            transcript: null\n                        };\n                        this.update_audio(newaudio);\n                        this.audiohelper.start(this.shadow);\n                    }\n\n                    //lets notify the caller we stopped recording\n                    log.debug('recording started:');\n                    var message={};\n                    message.type='recordingstarted';\n                    that.callback(message);\n                }\n            },\n\n\n            deepSpeech2: function(blob, callback) {\n                var bodyFormData = new FormData();\n                var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n                bodyFormData.append('audioFile', blob, blobname);\n                bodyFormData.append('scorer', this.passagehash);\n                bodyFormData.append('lang', this.lang);\n                bodyFormData.append('wwwroot', M.cfg.wwwroot);\n                if(this.stt_guided) {\n                    bodyFormData.append('strictmode', 'false');\n                }else{\n                    bodyFormData.append('strictmode', 'true');\n                }\n                //prompt is used by whisper and other transcibers down the line\n                if(this.currentPrompt!==false){\n                    bodyFormData.append('prompt', this.currentPrompt);\n                }\n\n                var oReq = new XMLHttpRequest();\n                oReq.open(\"POST\", this.asrurl, true);\n                oReq.onUploadProgress= function(progressEvent) {};\n                oReq.onload = function(oEvent) {\n                    if (oReq.status === 200) {\n                        callback(JSON.parse(oReq.response));\n                    } else {\n                        callback({data: {result: \"error\"}});\n                        log.debug(oReq.error);\n                    }\n                };\n                try {\n                    oReq.send(bodyFormData);\n                }catch(err){\n                    callback({data: {result: \"error\"}});\n                    log.debug(err);\n                }\n            },\n\n        };//end of return value\n\n    });"],"names":["define","$","log","audioHelper","notification","browserRec","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","owner","controls","uniqueid","audio_updated","maxTime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","clone","extend","this","init","opts","that","callback","shadow","prepare_html","recordercontainer","show","register_events","on_error","error","name","alert","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","update_audio","audiohelper","onError","onStop","clearInterval","interval","undefined","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","onStream","setInterval","stop","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","keypress","show_recorder_pointer","css","html","recordBtnContent","message","capturedspeech","cleanWord","word","replace","toLowerCase","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","send","err"],"mappings":"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"}