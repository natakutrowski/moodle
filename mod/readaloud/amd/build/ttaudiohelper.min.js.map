{"version":3,"file":"ttaudiohelper.min.js","sources":["../src/ttaudiohelper.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/ttwavencoder'], function ($, log, wavencoder) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file is the engine that drives audio rec and canvas drawing. TT Recorder is the just the glory kid\n     */\n\n    log.debug('TT Audio Helper initialising');\n\n    return {\n        encoder: null,\n        microphone: null,\n        isRecording: false,\n        audioContext: null,\n        processor: null,\n        uniqueid: null,\n        alreadyhadsound: false, //only start silence detection after we got a sound. Silence detection is end of speech.\n        silencecount: 0, //how many intervals of consecutive silence so far\n        silenceintervals: 15, //how many consecutive silence intervals (100ms) = silence detected\n        silencelevel: 25, //below this volume level = silence\n\n        config: {\n            bufferLen: 4096,\n            numChannels: 2,\n            mimeType: 'audio/wav'\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        init: function(waveHeight, uniqueid, therecorder) {\n\n            this.waveHeight = waveHeight;\n            this.uniqueid=uniqueid;\n            this.therecorder= therecorder;\n            this.prepare_html();\n\n\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n        },\n\n        onStop: function() {},\n        onStream: function() {},\n        onError: function() {},\n\n\n        prepare_html: function(){\n            this.canvas =$('#' + this.uniqueid + \"_waveform\");\n            this.canvasCtx = this.canvas[0].getContext(\"2d\");\n        },\n\n        start: function(shadow) {\n\n            var that =this;\n\n            // Audio context\n            this.audioContext = new AudioContext();\n            if (this.audioContext.createJavaScriptNode) {\n                this.processor = this.audioContext.createJavaScriptNode(this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n            } else if (this.audioContext.createScriptProcessor) {\n                this.processor = this.audioContext.createScriptProcessor(this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n            } else {\n                log.debug('WebAudio API has no support on this browser.');\n            }\n            this.processor.connect(this.audioContext.destination);\n\n\n            var gotStreamMethod= function(stream) {\n                that.onStream(stream);\n                that.isRecording = true;\n                that.therecorder.update_audio('isRecording',true);\n                that.tracks = stream.getTracks();\n\n                //lets check the noise suppression and echo reduction on these\n                for(var i=0; i<that.tracks.length; i++){\n                    var track = that.tracks[i];\n                    if(track.kind == \"audio\"){\n                        var settings = track.getSettings();\n                        if(settings.noiseSuppression){\n                            log.debug(\"Noise Suppression is on\");\n                        }else{\n                            log.debug(\"Noise Suppression is off\");\n                        }\n                        if(settings.echoCancellation){\n                            log.debug(\"Echo Cancellation is on\");\n                        }else{\n                            log.debug(\"Echo Cancellation is off\");\n                        }\n                    }\n                }\n\n                // Create a MediaStreamAudioSourceNode for the microphone\n                that.microphone = that.audioContext.createMediaStreamSource(stream);\n\n                // Connect the AudioBufferSourceNode to the gainNode\n                that.microphone.connect(that.processor);\n                that.encoder = wavencoder.clone();\n                that.encoder.init(that.audioContext.sampleRate, 2);\n\n                // Give the node a function to process audio events\n                that.processor.onaudioprocess = function(event) {\n                    that.encoder.encode(that.getBuffers(event));\n                };\n\n                that.listener = that.audioContext.createAnalyser();\n                that.microphone.connect(that.listener);\n                that.listener.fftSize = 2048; // 256\n\n                that.bufferLength = that.listener.frequencyBinCount;\n                that.analyserData = new Uint8Array(that.bufferLength);\n                that.volumeData = new Uint8Array(that.bufferLength);\n\n                that.canvasCtx.clearRect(0, 0, that.canvas.width()*2, that.waveHeight*2);\n                that.alreadyhadsound= false;\n                that.silencecount= 0;\n\n                that.interval = setInterval(function() {\n                    that.drawWave();\n                    that.detectSilence();\n                }, 100);\n\n            };\n\n\n\n            // Mic permission\n            var audioconstraints = true;\n            log.debug(\"Shadow is \" + shadow);\n            if(shadow===true){\n                audioconstraints =  {\n                    echoCancellation: false,\n                    noiseSuppression: false\n                }\n            }\n\n            //for ios we need to do this to keep playback volume high\n            if (\"audioSession\" in navigator) {\n                navigator.audioSession.type = 'play-and-record';\n                console.log(\"AudioSession API is supported\");\n            }\n\n            //get media stream\n            navigator.mediaDevices.getUserMedia({\n                audio:  audioconstraints,\n                video: false,\n\n            }).then(gotStreamMethod).catch(this.onError);\n        },\n\n        stop: function() {\n            clearInterval(this.interval);\n            this.canvasCtx.clearRect(0, 0, this.canvas.width()*2, this.waveHeight * 2);\n            this.isRecording = false;\n            this.silencecount=0;\n            this.alreadyhadsound=false;\n            this.therecorder.update_audio('isRecording',false);\n            //we check audiocontext is not in an odd state before closing\n            //superclickers can get it in an odd state\n            if (this.audioContext!==null && this.audioContext.state !== \"closed\") {\n                this.audioContext.close();\n            }\n            this.processor.disconnect();\n            this.tracks.forEach(function(track){track.stop();});\n            this.onStop(this.encoder.finish());\n        },\n\n        getBuffers: function(event) {\n            var buffers = [];\n            for (var ch = 0; ch < 2; ++ch) {\n                buffers[ch] = event.inputBuffer.getChannelData(ch);\n            }\n            return buffers;\n        },\n\n        detectSilence: function () {\n\n            this.listener.getByteFrequencyData(this.volumeData);\n\n            let sum = 0;\n            for (var vindex =0; vindex <this.volumeData.length;vindex++) {\n                sum += this.volumeData[vindex] * this.volumeData[vindex];\n            }\n\n            var volume = Math.sqrt(sum / this.volumeData.length);\n            // log.debug(\"volume: \" + volume + ', hadsound: ' + this.alreadyhadsound);\n            //if we already had a sound, we are looking for end of speech\n            if(volume < this.silencelevel && this.alreadyhadsound){\n                this.silencecount++;\n                if(this.silencecount>=this.silenceintervals){\n                    this.therecorder.silence_detected();\n                }\n                //if we have a sound, reset silence count to zero, and flag that we have started\n            }else if(volume > this.silencelevel){\n                this.alreadyhadsound = true;\n                this.silencecount=0;\n            }\n        },\n\n\n\n        drawWave: function() {\n\n            var width = this.canvas.width() * 2;\n            this.listener.getByteTimeDomainData(this.analyserData);\n\n            this.canvasCtx.fillStyle = 'white';\n            this.canvasCtx.fillRect(0, 0, width, this.waveHeight*2);\n\n            this.canvasCtx.lineWidth = 5;\n            this.canvasCtx.strokeStyle = 'gray';\n            this.canvasCtx.beginPath();\n\n            var slicewaveWidth = width / this.bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < this.bufferLength; i++) {\n\n                var v = this.analyserData[i] / 128.0;\n                var y = v * this.waveHeight;\n\n                if (i === 0) {\n                    // this.canvasCtx.moveTo(x, y);\n                } else {\n                    this.canvasCtx.lineTo(x, y);\n                }\n\n                x += slicewaveWidth;\n            }\n\n            this.canvasCtx.lineTo(width, this.waveHeight);\n            this.canvasCtx.stroke();\n\n        }\n    }; //end of this declaration\n\n\n});"],"names":["define","$","log","wavencoder","debug","encoder","microphone","isRecording","audioContext","processor","uniqueid","alreadyhadsound","silencecount","silenceintervals","silencelevel","config","bufferLen","numChannels","mimeType","clone","extend","this","init","waveHeight","therecorder","prepare_html","window","AudioContext","webkitAudioContext","onStop","onStream","onError","canvas","canvasCtx","getContext","start","shadow","that","createJavaScriptNode","createScriptProcessor","connect","destination","audioconstraints","echoCancellation","noiseSuppression","navigator","audioSession","type","console","mediaDevices","getUserMedia","audio","video","then","stream","update_audio","tracks","getTracks","i","length","track","kind","settings","getSettings","createMediaStreamSource","sampleRate","onaudioprocess","event","encode","getBuffers","listener","createAnalyser","fftSize","bufferLength","frequencyBinCount","analyserData","Uint8Array","volumeData","clearRect","width","interval","setInterval","drawWave","detectSilence","catch","stop","clearInterval","state","close","disconnect","forEach","finish","buffers","ch","inputBuffer","getChannelData","getByteFrequencyData","sum","vindex","volume","Math","sqrt","silence_detected","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","slicewaveWidth","x","y","lineTo","stroke"],"mappings":"AAAAA,qCAAO,CAAC,SAAU,WAAY,+BAA+B,SAAUC,EAAGC,IAAKC,mBAM3ED,IAAIE,MAAM,gCAEH,CACHC,QAAS,KACTC,WAAY,KACZC,aAAa,EACbC,aAAc,KACdC,UAAW,KACXC,SAAU,KACVC,iBAAiB,EACjBC,aAAc,EACdC,iBAAkB,GAClBC,aAAc,GAEdC,OAAQ,CACJC,UAAW,KACXC,YAAa,EACbC,SAAU,aAIdC,MAAO,kBACIlB,EAAEmB,QAAO,EAAM,GAAIC,OAI9BC,KAAM,SAASC,WAAYb,SAAUc,kBAE5BD,WAAaA,gBACbb,SAASA,cACTc,YAAaA,iBACbC,eAGLC,OAAOC,aAAeD,OAAOC,cAAgBD,OAAOE,oBAIxDC,OAAQ,aACRC,SAAU,aACVC,QAAS,aAGTN,aAAc,gBACLO,OAAQ/B,EAAE,IAAMoB,KAAKX,SAAW,kBAChCuB,UAAYZ,KAAKW,OAAO,GAAGE,WAAW,OAG/CC,MAAO,SAASC,YAERC,KAAMhB,UAGLb,aAAe,IAAImB,aACpBN,KAAKb,aAAa8B,0BACb7B,UAAYY,KAAKb,aAAa8B,qBAAqBjB,KAAKN,OAAOC,UAAWK,KAAKN,OAAOE,YAAaI,KAAKN,OAAOE,aAC7GI,KAAKb,aAAa+B,2BACpB9B,UAAYY,KAAKb,aAAa+B,sBAAsBlB,KAAKN,OAAOC,UAAWK,KAAKN,OAAOE,YAAaI,KAAKN,OAAOE,aAErHf,IAAIE,MAAM,qDAETK,UAAU+B,QAAQnB,KAAKb,aAAaiC,iBA8DrCC,kBAAmB,EACvBxC,IAAIE,MAAM,aAAegC,SACb,IAATA,SACCM,iBAAoB,CAChBC,kBAAkB,EAClBC,kBAAkB,IAKtB,iBAAkBC,YAClBA,UAAUC,aAAaC,KAAO,kBAC9BC,QAAQ9C,IAAI,kCAIhB2C,UAAUI,aAAaC,aAAa,CAChCC,MAAQT,iBACRU,OAAO,IAERC,MA/EkB,SAASC,QAC1BjB,KAAKP,SAASwB,QACdjB,KAAK9B,aAAc,EACnB8B,KAAKb,YAAY+B,aAAa,eAAc,GAC5ClB,KAAKmB,OAASF,OAAOG,gBAGjB,IAAIC,EAAE,EAAGA,EAAErB,KAAKmB,OAAOG,OAAQD,IAAI,KAC/BE,MAAQvB,KAAKmB,OAAOE,MACP,SAAdE,MAAMC,KAAgB,KACjBC,SAAWF,MAAMG,cAClBD,SAASlB,iBACR1C,IAAIE,MAAM,2BAEVF,IAAIE,MAAM,4BAEX0D,SAASnB,iBACRzC,IAAIE,MAAM,2BAEVF,IAAIE,MAAM,6BAMtBiC,KAAK/B,WAAa+B,KAAK7B,aAAawD,wBAAwBV,QAG5DjB,KAAK/B,WAAWkC,QAAQH,KAAK5B,WAC7B4B,KAAKhC,QAAUF,WAAWgB,QAC1BkB,KAAKhC,QAAQiB,KAAKe,KAAK7B,aAAayD,WAAY,GAGhD5B,KAAK5B,UAAUyD,eAAiB,SAASC,OACrC9B,KAAKhC,QAAQ+D,OAAO/B,KAAKgC,WAAWF,SAGxC9B,KAAKiC,SAAWjC,KAAK7B,aAAa+D,iBAClClC,KAAK/B,WAAWkC,QAAQH,KAAKiC,UAC7BjC,KAAKiC,SAASE,QAAU,KAExBnC,KAAKoC,aAAepC,KAAKiC,SAASI,kBAClCrC,KAAKsC,aAAe,IAAIC,WAAWvC,KAAKoC,cACxCpC,KAAKwC,WAAa,IAAID,WAAWvC,KAAKoC,cAEtCpC,KAAKJ,UAAU6C,UAAU,EAAG,EAAuB,EAApBzC,KAAKL,OAAO+C,QAA2B,EAAhB1C,KAAKd,YAC3Dc,KAAK1B,iBAAiB,EACtB0B,KAAKzB,aAAc,EAEnByB,KAAK2C,SAAWC,aAAY,WACxB5C,KAAK6C,WACL7C,KAAK8C,kBACN,QA2BkBC,MAAM/D,KAAKU,UAGxCsD,KAAM,WACFC,cAAcjE,KAAK2D,eACd/C,UAAU6C,UAAU,EAAG,EAAuB,EAApBzD,KAAKW,OAAO+C,QAA6B,EAAlB1D,KAAKE,iBACtDhB,aAAc,OACdK,aAAa,OACbD,iBAAgB,OAChBa,YAAY+B,aAAa,eAAc,GAGpB,OAApBlC,KAAKb,cAAmD,WAA5Ba,KAAKb,aAAa+E,YACzC/E,aAAagF,aAEjB/E,UAAUgF,kBACVjC,OAAOkC,SAAQ,SAAS9B,OAAOA,MAAMyB,eACrCxD,OAAOR,KAAKhB,QAAQsF,WAG7BtB,WAAY,SAASF,eACbyB,QAAU,GACLC,GAAK,EAAGA,GAAK,IAAKA,GACvBD,QAAQC,IAAM1B,MAAM2B,YAAYC,eAAeF,WAE5CD,SAGXT,cAAe,gBAENb,SAAS0B,qBAAqB3E,KAAKwD,gBAEpCoB,IAAM,MACL,IAAIC,OAAQ,EAAGA,OAAQ7E,KAAKwD,WAAWlB,OAAOuC,SAC/CD,KAAO5E,KAAKwD,WAAWqB,QAAU7E,KAAKwD,WAAWqB,YAGjDC,OAASC,KAAKC,KAAKJ,IAAM5E,KAAKwD,WAAWlB,QAG1CwC,OAAS9E,KAAKP,cAAgBO,KAAKV,sBAC7BC,eACFS,KAAKT,cAAcS,KAAKR,uBAClBW,YAAY8E,oBAGhBH,OAAS9E,KAAKP,oBACdH,iBAAkB,OAClBC,aAAa,IAM1BsE,SAAU,eAEFH,MAA8B,EAAtB1D,KAAKW,OAAO+C,aACnBT,SAASiC,sBAAsBlF,KAAKsD,mBAEpC1C,UAAUuE,UAAY,aACtBvE,UAAUwE,SAAS,EAAG,EAAG1B,MAAuB,EAAhB1D,KAAKE,iBAErCU,UAAUyE,UAAY,OACtBzE,UAAU0E,YAAc,YACxB1E,UAAU2E,oBAEXC,eAAiB9B,MAAQ1D,KAAKoD,aAC9BqC,EAAI,EAECpD,EAAI,EAAGA,EAAIrC,KAAKoD,aAAcf,IAAK,KAGpCqD,EADI1F,KAAKsD,aAAajB,GAAK,IACnBrC,KAAKE,WAEP,IAANmC,QAGKzB,UAAU+E,OAAOF,EAAGC,GAG7BD,GAAKD,oBAGJ5E,UAAU+E,OAAOjC,MAAO1D,KAAKE,iBAC7BU,UAAUgF"}