{"version":3,"file":"dictlookup.min.js","sources":["../src/dictlookup.js"],"sourcesContent":["/**\n * dictionary lookup\n *\n * @package mod_wordcards\n * @author  Justin Hunt - poodll.com\n * *\n */\n\ndefine(['jquery','core/log','core/ajax','core/templates'], function($,log,ajax,templates) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Wordcards dictionary lookup: initialising');\n\n    return {\n        init: function (cmid,modid,resultscont) {\n            log.debug('Wordcards dictionary lookup: initialising');\n            this.cmid = cmid;\n            this.modid = modid;\n            this.resultscont = resultscont;\n        },\n\n        update_page: function(alldata){\n\n            //update the page\n            var that = this;\n            that.resultscont.empty();\n\n            for(var i = 0; i < alldata.length; i++)\n            {\n                var tdata = alldata[i];\n                templates.render('mod_wordcards/word_wizard_oneresult', tdata).then(\n                    function (html, js) {\n                        that.resultscont.append(html);\n                        templates.runTemplateJS(js);\n                    }\n                );\n            }\n        },\n\n        replace_placeholder_with_result: function(placeholder, termdata) {\n            var that = this;\n            templates.render('mod_wordcards/word_wizard_oneresult', termdata).then(\n                function (html, js) {\n                    placeholder.replaceWith(html);\n                    templates.runTemplateJS(js);\n                }\n            );\n        },\n\n        getwords: async function (allwords,sourcelang,definitionslang) {\n            var that = this;\n            var searchbtn = $(\".ww_words_fetch_btn\");\n\n            //if we have no words, do nothing\n            if (allwords.trim() === '') {\n                return false;\n            }\n\n            that.resultscont.empty();\n\n        //originally we passed a single request with all words in a CSV list in the terms arg\n        //but that was too slow because the server would process them sequentially\n        // so now we make a request for each word. It would still work with a single request\n            var requests = [];\n            var templatepromises = [];\n            var wordarray = allwords.split(',');\n            for (var i = 0; i < wordarray.length; i++) {\n                var word = wordarray[i].trim();\n                if (word !== '') {\n                    requests.push({\n                        methodname: 'mod_wordcards_search_dictionary',\n                        args: {terms: word, cmid: that.cmid, sourcelang: sourcelang, targetlangs: definitionslang},\n                        async: true\n                    });\n                    //add placeholders for each word\n                    let tdata = {'term': word, 'termno': requests.length-1};\n                    templatepromises.push(templates.render('mod_wordcards/ww_skeleton',tdata));\n                }\n            }\n            //first create all the placeholders, we use await in case the ajax requests return faster than the placeholders are created\n            //replace button caption with spinner while we wait\n            var searchbtncontent = searchbtn.html();\n            searchbtn.html('<i class=\"icon fa fa-spinner fa-spin fa-fw\"></i>');\n           await Promise.all(templatepromises).then((results) => {\n                results.forEach((html) => {\n                    that.resultscont.append(html);\n                });\n            });\n           //replace the spinner with the original caption\n            searchbtn.html(searchbtncontent);\n        \n           // Loop through the requests, send and respond to each \n           for (let reqindex=0; reqindex < requests.length; reqindex++){\n                ajax.call([requests[reqindex]],true)[0].then(response=>{\n\n                    //fethc the placeholder\n                    log.debug('placeholder - #mod_wordcards_wwskeleton_'+ reqindex);\n                    var placeholder = $('#mod_wordcards_wwskeleton_'+ reqindex);\n\n                    //if return code=0, disaster, log and continue\n                    if (response.success === 0) {\n                        log.debug(response.payload);\n                    }\n                    var terms = JSON.parse(response.payload);\n                    for (var i = 0; i < terms.length; i++) {\n                        var theterm = terms[i];\n                        //if a word search failed\n                        if (theterm.count === 0 || theterm.results.length===0) {\n                            var senses = [];\n                            senses.push({\n                                definition: 'No definition', sourcedefinition: 'No definition',\n                                modelsentence: '', senseindex: 0, translations: '{}'\n                            })\n                            var tdata = {term: theterm.term, senses: senses, modid: that.modid};\n                            that.replace_placeholder_with_result(placeholder,tdata);\n\n                        } else {\n                            var tdata = {term: theterm.term, senses: [], modid: that.modid};\n                            for (var sindex in theterm.results) {\n                                var sense = theterm.results[sindex];\n                                //by default its term:English def:English\n                                var sourcedefinition = sense.definition;\n                                var alltrans = {};\n                                for (var langkey in sense) {\n                                    if (sense.hasOwnProperty(langkey) && langkey.startsWith('lang_')) {\n                                        alltrans[langkey.substring(5)] = sense[langkey];\n                                    }\n                                }\n\n                                var translations = JSON.stringify(alltrans);\n                                var definition = sourcedefinition;\n                                //if its NOT term:english and def:english, we pull the definition from the translation\n                                log.debug('definitionslang: ' + definitionslang);\n                                if (definitionslang !== \"en\") {\n                                    if (sense.hasOwnProperty('lang_' + definitionslang)) {\n                                        definition = sense['lang_' + definitionslang];\n                                    } else {\n                                        definition = 'No translation available';\n                                    }\n                                }else{\n                                    if (sense.hasOwnProperty('meaning')) {\n                                        definition = sense.meaning;\n                                    } else if (sense.hasOwnProperty('lang_en')) {\n                                        definition = sense['lang_en'];\n                                    } else if (definition == '') {\n                                        definition = 'No translation available';\n                                    }\n                                }\n\n                                //model sentence)\n                                var modelsentence = sense.example;\n\n                                tdata.senses.push({\n                                    definition: definition, sourcedefinition: sourcedefinition,\n                                    modelsentence: modelsentence, senseindex: sindex, translations: translations\n                                });\n                            }//end of results loop\n                            that.replace_placeholder_with_result(placeholder,tdata);\n                        }\n                    }//end of terms loop\n                });\n           }\n    \n        },\n    }\n\n});\n\n"],"names":["define","$","log","ajax","templates","debug","init","cmid","modid","resultscont","update_page","alldata","that","this","empty","i","length","tdata","render","then","html","js","append","runTemplateJS","replace_placeholder_with_result","placeholder","termdata","replaceWith","getwords","async","allwords","sourcelang","definitionslang","searchbtn","trim","requests","templatepromises","wordarray","split","word","push","methodname","args","terms","targetlangs","searchbtncontent","Promise","all","results","forEach","reqindex","call","response","success","payload","JSON","parse","theterm","count","senses","definition","sourcedefinition","modelsentence","senseindex","translations","term","sindex","sense","alltrans","langkey","hasOwnProperty","startsWith","substring","stringify","meaning","example"],"mappings":"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"}