{"version":3,"file":"pollyhelper.min.js","sources":["../src/pollyhelper.js"],"sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Polly Helper: initialising');\n\n    return {\n        sentenceURLs: [],\n        sentencetexts: [],\n        wordstarts: [],\n        wordcounts: [],\n        textblock: false,\n        textstring: false,\n        wordselector: '',\n        sentenceselector: '',\n        passagecssclass: 'filterpoodll_pollytextblock_cont',\n        cloudpoodlltoken: '',\n        voice: '',\n        highlightmode: '',\n        theplayer: false,\n        pendingurls: 0,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        reset: function(){\n            this.unspanify_text_passage();\n            this.textblock = false;\n            this.textstring = false;\n            this.sentenceURLs= [];\n            this.sentencetexts= [];\n            this.wordstarts= [];\n            this.wordcounts= [];\n        },\n\n        set_textblock: function(textblock){\n            var that = this;\n\n            //if we are already set to this textblock, then do nothing\n            if(textblock===this.textblock){\n                log.debug('it was the same textblock');\n                return;\n            }\n            //remove the previous spans if we had them\n            if(this.textblock!==false) {\n                    this.reset();\n            }\n            //set our new textblock\n            this.textblock= textblock;\n            var usetext = textblock.text();\n\n            // Break text into sentences, and fetch data + TTS URL for each sentence.\n            this.spanify_text_passage();\n            this.sentencetexts = this.get_sentences_from_spanified_text();\n            this.pendingurls=this.sentencetexts.length;\n            var previousend = 0;\n\n            for (var currentsentence = 0; currentsentence < this.sentencetexts.length; currentsentence++){\n                this.wordstarts[currentsentence]= previousend;\n                this.wordcounts[currentsentence]= this.split_into_words(this.sentencetexts[currentsentence]).length;\n                previousend = previousend + this.wordcounts[currentsentence];\n\n                var speaktext = this.sentencetexts[currentsentence];\n                this.fetch_polly_url(speaktext,\n                    function(sentenceindex) {\n                        return function(pollyurl) {\n                            that.sentenceURLs[sentenceindex] = pollyurl;\n                            log.debug(sentenceindex + ' ' + pollyurl);\n                            that.pendingurls--;\n                        }\n                    }(currentsentence)\n                );\n            }\n        },\n\n        set_text: function(textstring){\n            var that = this;\n            //if we already have this one, return\n            if(textstring===this.textstring) {\n                log.debug('it was the same textstring');\n                return;\n            }\n            //remove the previous spans if we had them\n            if(this.textblock!==false) {\n                this.reset();\n            }\n\n            //remember this for next time\n            this.textstring= textstring;\n            this.sentencetexts[0]=textstring;\n            this.pendingurls=1;\n            this.fetch_polly_url(textstring,\n                function(pollyurl){\n                    that.sentenceURLs[0] = pollyurl;\n                    log.debug('0' + ' ' + pollyurl);\n                    that.pendingurls--;\n                }\n            );\n\n        },\n\n        init: function (theplayer,itemid, textblock, voice,sentenceselector,wordselector,passagecssclass,highlightmode, cloudpoodlltoken) {\n            var that = this;\n            this.sentenceselector= sentenceselector;\n            this.wordselector= wordselector;\n            this.passagecssclass= passagecssclass;\n            this.cloudpoodlltoken = cloudpoodlltoken;\n            this.highlightmode=highlightmode;\n            this.voice = voice;\n            this.theplayer = theplayer;\n\n            this.set_textblock(textblock);\n\n        },\n\n        // FUNCTION: Split a text passage into sentences.\n        split_into_sentences: function(thetext){\n            thetext = thetext.replace(/\\s+/g,' ').trim();\n            if(thetext ===''){return[];}\n            return thetext.match(/([^\\.!\\?]+[\\.!\\?\"']+)|([^\\.!\\?\"']+$)/g);\n        },\n\n        // FUNCTION: Split a text passage into words.\n        split_into_words: function(thetext){\n            thetext = thetext.replace(/\\s+/g,' ').trim();\n            if(thetext===''){return[];}\n            return thetext.split(' ');\n        },\n\n        // FUNCTION: Fetch polly url.\n        fetch_polly_url: function (speaktext, callback) {\n\n            // The REST API we are calling.\n            var functionname = 'local_cpapi_fetch_polly_url';\n\n            // Fetch the Posturl. We need this.\n            // Set up our ajax request\n            var xhr = new XMLHttpRequest();\n            var that = this;\n\n            // Set up our handler for the response.\n            xhr.onreadystatechange = function (e) {\n                if (this.readyState === 4) {\n                    if (xhr.status === 200) {\n\n                        // Get a yes or forgetit or tryagain.\n                        var payload = xhr.responseText;\n                        var payloadobject = JSON.parse(payload);\n                        if (payloadobject) {\n                            // ReturnCode > 0  indicates an error.\n                            if (payloadobject.returnCode > 0) {\n                                console.log(payloadobject.returnMessage);\n                                return false;\n                                // If all good, then lets do the embed.\n                            } else if (payloadobject.returnCode === 0){\n                                var pollyurl = payloadobject.returnMessage;\n                                callback(pollyurl);\n                            } else {\n                                console.log('Polly Signed URL Request failed:');\n                                console.log(payloadobject);\n                            }\n                        } else {\n                            console.log('Polly Signed URL Request something bad happened');\n                        }\n                    } else {\n                        console.log('Polly Signed URL Request Not 200 response:' + xhr.status);\n                    }\n                }\n            };\n\n            // Make our request.\n            var xhrparams = \"wstoken=\" + this.cloudpoodlltoken\n                    + \"&wsfunction=\" + functionname\n                    + \"&moodlewsrestformat=\" + 'json'\n                    + \"&text=\" + encodeURIComponent(speaktext)\n                    + '&texttype=text'\n                    + '&voice=' + this.voice\n                    + '&appid=' + 'filter_poodll'\n                    + '&owner=poodll'\n                    + '&region=useast1';\n\n            var serverurl = 'https://cloud.poodll.com' + \"/webservice/rest/server.php\";\n            xhr.open(\"POST\", serverurl, true);\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xhr.send(xhrparams);\n        },\n\n        // Is not used.\n        // FUNCTION: Determine if the string is text or HTML.\n        isHTML: function (testString) {\n            var htmlRegex = new RegExp(\"<([A-Za-z][A-Za-z0-9]*)\\\\b[^>]*>(.*?)</\\\\1>\");\n            return htmlRegex.test(testString);\n        },\n\n        unspanify_text_passage: function(){\n\n            //remove select to read class to container\n            this.textblock.removeClass(this.passagecssclass);\n\n           // remove previously set up spans\n            if(this.highlightmode==='word'){\n                this.textblock.find('.tbr_word').contents().unwrap();\n            } else {\n            // For sentences.\n                this.textblock.find('.tbr_sentence').contents().unwrap();\n            }// End of for loop.\n        },\n\n        // FUNCTION: Break a text passage into words/sentences, and surround the words with marker tags.\n        spanify_text_passage: function(){\n            var that = this;\n\n            // The itemcount er.\n            var itemcount = -1;\n\n            //add select to read class to container\n            this.textblock.addClass(this.passagecssclass);\n\n            // Get all the text nodes in the textblock.\n            var textnodes = this.textblock.find('*').contents().filter(function(){ return this.nodeType === 3; });\n            // Wrap sentence or words in text block with spans.\n            textnodes.each(function(){\n                var retpieces = '';\n                if(that.highlightmode==='word'){\n                    //for words\n                    var thewords = that.split_into_words($(this).text());\n                    for (var theword = 0; theword < thewords.length; theword++){\n                        itemcount++;\n                        retpieces =  retpieces + '<span class=\"tbr_word\" data-wordindex=\"'+ itemcount +'\">' + thewords[theword] + '</span> ';\n                    }// End of for loop.\n                } else {\n                    // For sentences.\n                    var thesentences = that.split_into_sentences($(this).text());\n                    for (var thesentence=0; thesentence < thesentences.length; thesentence++){\n                        itemcount++;\n                        retpieces =  retpieces + '<span class=\"tbr_sentence\" data-sentenceindex=\"'+ itemcount +'\">' + thesentences[thesentence] + '</span>&nbsp;';\n                    }// End of for loop.\n                }\n                $(this).replaceWith(retpieces);\n            });// End of textnodes each\n        },\n\n        get_sentences_from_spanified_text: function(){\n            var sentences = [];\n            var spans = this.textblock.find('span.tbr_sentence');\n            spans.each(function(){\n                sentences.push($(this).text());\n            });\n            return sentences\n        },\n\n        // FUNCTION: Unhighlight a sentence as active.\n        dehighlight_all: function(){\n            switch(this.highlightmode){\n                case 'word':\n                    $(this.wordselector,this.textblock).removeClass('activesentence');\n                    break;\n                case 'sentence':\n                    $(this.sentenceselector).removeClass('activesentence');\n                    break;\n                case 'none':\n                default:\n                // Do nothing.\n            }\n        },\n\n        // FUNCTION: Highlight a sentence as active.\n        highlight_sentence: function(thesentence_index){\n            switch(this.highlightmode){\n                case 'word':\n                    $(this.wordselector,this.textblock).removeClass('activesentence');\n                    $(this.wordselector,this.textblock).slice(this.wordstarts[thesentence_index],\n                            this.wordstarts[thesentence_index] +\n                            this.wordcounts[thesentence_index]).addClass('activesentence');\n                    break;\n                case 'sentence':\n                    $(this.sentenceselector).removeClass('activesentence');\n                    $(this.sentenceselector + '[data-sentenceindex=' + thesentence_index + ']').addClass('activesentence');\n                    break;\n                case 'none':\n                default:\n                // Do nothing.\n            }\n        },\n\n        // FUNCTION: Play a single sentence and mark it active for display purposes.\n        doplayaudio: function(thesentence) {\n            var that=this;\n            if(this.pendingurls>0){\n                setTimeout(function(){that.doplayaudio(thesentence);},100);\n                return;\n            }\n            if (typeof thesentence === 'number') {\n                // If thesentence is a number.\n                this.dehighlight_all();\n                this.highlight_sentence(thesentence);\n                this.theplayer.attr('src', this.sentenceURLs[thesentence]);\n            //    log.debug('sentenceurl:' + this.sentenceURLs[thesentence]);\n            //    log.debug('sentencenumber:' + thesentence);\n            //    log.debug('sentencetext:' + this.sentencetexts[thesentence]);\n            } else {\n                if(this.sentenceURLs.length > 0) {\n                    this.theplayer.attr('src', this.sentenceURLs[0]);\n                }\n            }\n            this.theplayer[0].load();\n            this.theplayer[0].play();\n        }\n    }\n});"],"names":["define","$","log","debug","sentenceURLs","sentencetexts","wordstarts","wordcounts","textblock","textstring","wordselector","sentenceselector","passagecssclass","cloudpoodlltoken","voice","highlightmode","theplayer","pendingurls","clone","extend","this","reset","unspanify_text_passage","set_textblock","that","text","spanify_text_passage","get_sentences_from_spanified_text","length","previousend","currentsentence","split_into_words","speaktext","fetch_polly_url","sentenceindex","pollyurl","set_text","init","itemid","split_into_sentences","thetext","replace","trim","match","split","callback","xhr","XMLHttpRequest","onreadystatechange","e","readyState","status","payload","responseText","payloadobject","JSON","parse","returnCode","console","returnMessage","xhrparams","encodeURIComponent","open","setRequestHeader","send","isHTML","testString","RegExp","test","removeClass","find","contents","unwrap","itemcount","addClass","filter","nodeType","each","retpieces","thewords","theword","thesentences","thesentence","replaceWith","sentences","push","dehighlight_all","highlight_sentence","thesentence_index","slice","doplayaudio","setTimeout","attr","load","play"],"mappings":"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"}